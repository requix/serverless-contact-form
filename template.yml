AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type, x-requested-with'"
      AllowOrigin: !Join ["", ["'http://", !Ref S3BucketName, ".s3-website.", !Ref "AWS::Region", ".amazonaws.com'"]]
      AllowMethods: "'POST'"      

Resources:
  RequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./new_request
      Timeout: 10
      MemorySize: 1024
      Environment:
        Variables:          
          NEW_CONTACT_TOPIC: !Ref NewRequestTopic          
      Events:
        PostAPI:
          Type: Api
          Properties:
            Path: /request
            Method: post
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref S3RequestStorage
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:  !Ref NewRequestTopic
  
  SaveToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./save_to_s3
      Timeout: 5
      MemorySize: 1024
      Environment:
        Variables:                    
          STORAGE_BUCKET_NAME: !Ref S3RequestStorage
      Events:
        SnsMessage:
          Type: SQS
          Properties:
            Queue: !GetAtt SaveToS3Queue.Arn
            BatchSize: 10      
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref S3RequestStorage

  SaveToDynamoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./save_to_dynamo
      Timeout: 5
      MemorySize: 1024
      Environment:
        Variables:                    
          STORAGE_DYNAMODB_TABLE: !Ref DynamoDbRequestTable
      Events:
        SnsMessage:
          Type: SQS
          Properties:
            Queue: !GetAtt SaveToDynamoQueue.Arn
            BatchSize: 10      
      Policies:
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt DynamoDbRequestTable.Arn

  CounterAddFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./counter_add
      Timeout: 5
      MemorySize: 1024
      # Environment:
      #   Variables:                            
      #     ELASTICACHE_ENDPOINT: !GetAtt RedisCluster.ConfigurationEndPoint.Address
      #     ELASTICACHE_PORT: !GetAtt RedisCluster.ConfigurationEndPoint.Port      
      Events:
        SnsMessage:
          Type: SNS
          Properties:
            Topic: !Ref NewRequestTopic
      Policies:      
      - AWSLambdaVPCAccessExecutionRole      
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2

  CounterViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./counter_view
      Timeout: 5
      MemorySize: 1024
      # Environment:
      #   Variables:                            
      #     ELASTICACHE_ENDPOINT: !GetAtt RedisCluster.ConfigurationEndPoint.Address
      #     ELASTICACHE_PORT: !GetAtt RedisCluster.ConfigurationEndPoint.Port      
      Events:
        CounterViewAPI:
          Type: Api
          Properties:
            Path: /counter
            Method: get
      Policies:      
      - AWSLambdaVPCAccessExecutionRole      
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2

  CounterResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: ./counter_reset
      Timeout: 5
      MemorySize: 1024
      # Environment:
      #   Variables:                            
      #     ELASTICACHE_ENDPOINT: !GetAtt RedisCluster.ConfigurationEndPoint.Address
      #     ELASTICACHE_PORT: !GetAtt RedisCluster.ConfigurationEndPoint.Port      
      Events:
        ResetBySchedule:
          Type: Schedule
          Properties:
            Schedule: rate(24 hours)        
      Policies:      
      - AWSLambdaVPCAccessExecutionRole      
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2                    

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable Redis access
      Tags:
        - Key: Project
          Value: !Ref ProjectName
      
  S3RequestStorage:
    Type: AWS::S3::Bucket

  DynamoDbRequestTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  NewRequestTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref SNSEmailAddress
        Protocol: email      
      - Endpoint: !GetAtt CounterAddFunction.Arn
        Protocol: lambda
    
  SaveToS3Queue:
    Type: AWS::SQS::Queue

  SaveToDynamoQueue:
    Type: AWS::SQS::Queue
  
  SubscriptionForSaveToS3Queue:
    Type: AWS::SNS::Subscription
    Properties:      
      Endpoint: !GetAtt SaveToS3Queue.Arn      
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref NewRequestTopic

  SubscriptionForSaveToDynamoQueue:
    Type: AWS::SNS::Subscription
    Properties:      
      Endpoint: !GetAtt SaveToDynamoQueue.Arn      
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref NewRequestTopic
          
  AllowSNS2SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-To-SaveToS3Queue
          Effect: Allow
          Action: ['sqs:SendMessage']
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref NewRequestTopic
          Principal: {AWS: '*'}
          Resource: !GetAtt SaveToS3Queue.Arn
        - Sid: Allow-SNS-To-SaveToDyanoQueue
          Effect: Allow
          Action: ['sqs:SendMessage']
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref NewRequestTopic
          Principal: {AWS: '*'}
          Resource: !GetAtt SaveToDynamoQueue.Arn
          
        Version: '2008-10-17'
      Queues:
      - !Ref SaveToS3Queue
      - !Ref SaveToDynamoQueue

  #
  # ElastiCache
  #
  # RedisCluster:
  #   Type: AWS::ElastiCache::ReplicationGroup
  #   Properties:
  #     AutoMinorVersionUpgrade: true      
  #     CacheParameterGroupName: default.redis5.0.cluster.on
  #     CacheNodeType: !Ref ElasticacheInstanceClass
  #     CacheSubnetGroupName:  !Ref RedisSubnetGroup
  #     Engine: redis
  #     EngineVersion: 5.0.4
  #     NumNodeGroups: 1
  #     Port: 6379
  #     ReplicasPerNodeGroup: 1
  #     ReplicationGroupDescription: Redis group for scaling
  #     SecurityGroupIds:
  #       - !Ref RedisSecurityGroup

  RedisSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ElastiCache Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  #
  # Networking
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select: 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock:  !FindInMap ['SubnetConfig', 'Private1', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-1"
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select: 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock:  !FindInMap ['SubnetConfig', 'Private2', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-2"
        - Key: Project
          Value: !Ref ProjectName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select: 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock:  !FindInMap ['SubnetConfig', 'Public1', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet-1"
        - Key: Project
          Value: !Ref ProjectName

  LambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select: 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock:  !FindInMap ['SubnetConfig', 'Lambda1', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-lambda-subnet-1"
        - Key: Project
          Value: !Ref ProjectName

  LambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select: 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock:  !FindInMap ['SubnetConfig', 'Lambda2', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-lambda-subnet-2"
        - Key: Project
          Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  VPNConnection: 
    Type: AWS::EC2::VPNConnection
    Properties: 
      Type: ipsec.1
      StaticRoutesOnly: true
      CustomerGatewayId: 
        !Ref CustomerGateway
      VpnGatewayId: 
        !Ref VPNGateway

  VPNGateway: 
    Type: AWS::EC2::VPNGateway
    Properties: 
        Type: ipsec.1

  CustomerGateway: 
    Type: AWS::EC2::CustomerGateway
    Properties: 
        Type: ipsec.1
        BgpAsn: 65534
        IpAddress: 14.1.2.3

Parameters:
  ProjectName:
    Type: String
    Default: serverless-contact-request-new
  SNSEmailAddress:
    Type: String
  S3BucketName:
    Type: String
  ElasticacheInstanceClass:
    Type: String
    Default: cache.t2.micro

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Private1:
      CIDR: '10.0.0.0/24'
    Private2:
      CIDR: '10.0.1.0/24'
    Lambda1:
      CIDR: '10.0.2.0/24'
    Lambda2:
      CIDR: '10.0.3.0/24'
    Public1:
      CIDR: '10.0.4.0/24'

Outputs:
  S3Bucket:
    Value: !Ref S3RequestStorage
    Description: The S3 Bucket to store contact request
  Endpoint:
    Value: !Join ["", [
      "https://",
      !Ref ServerlessRestApi,
      ".execute-api.",
      !Ref "AWS::Region",
      ".amazonaws.com/",
      !Ref ServerlessRestApiProdStage
    ]]
