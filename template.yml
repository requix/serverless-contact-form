AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type, x-requested-with'"
      AllowOrigin: !Join ["", ["'http://", !Ref S3BucketName, ".s3-website.", !Ref "AWS::Region", ".amazonaws.com'"]]
      AllowMethods: "'POST'"      

Resources:
  RequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      CodeUri: .
      Timeout: 10
      MemorySize: 1024
      Environment:
        Variables:          
          NEW_CONTACT_TOPIC: !Ref NewRequestTopic
          STORAGE_BUCKET_NAME: !Ref S3RequestStorage
          STORAGE_DYNAMODB_TABLE: !Ref DynamoDbRequestTable
      Events:
        PostAPI:
          Type: Api
          Properties:
            Path: /request
            Method: post
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref S3RequestStorage
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:  !Ref NewRequestTopic

      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt DynamoDbRequestTable.Arn

      
  S3RequestStorage:
    Type: AWS::S3::Bucket

  DynamoDbRequestTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    
  NewRequestQueue: 
    Type: AWS::SQS::Queue
  
  NewRequestTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref SNSEmailAddress
        Protocol: email
      - Endpoint: !GetAtt NewRequestQueue.Arn
        Protocol: sqs
  
  AllowSNS2SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PublicationPolicy
        Statement:
        - Action: ['sqs:SendMessage']
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref NewRequestTopic
          Effect: Allow
          Principal: {AWS: '*'}
          Resource: !GetAtt NewRequestQueue.Arn            
          Sid: Allow-SNS-SendMessage
        Version: '2008-10-17'
      Queues:
      - !Ref NewRequestQueue

Parameters:
  SNSEmailAddress:
    Type: String
  S3BucketName:
    Type: String      

Outputs:
  S3Bucket:
    Value: !Ref S3RequestStorage
    Description: The S3 Bucket to store contact request
  Endpoint:
    Value: !Join ["", [
      "https://",
      !Ref ServerlessRestApi,
      ".execute-api.",
      !Ref "AWS::Region",
      ".amazonaws.com/",
      !Ref ServerlessRestApiProdStage
    ]]
